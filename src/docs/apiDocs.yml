openapi: 3.0.1
info:
  title: Epic Books API
  description: netflix docs
  version: 1.0.1
servers:
  - url: http://localhost:3001
    variables: {}
    description: Local server
  - url: https://solo-project-netflix-be-production.up.railway.app
    variables: {}
    description: Cloud server
tags:
  - name: medias
    description: medias operations
paths:
  /medias/:
    post:
      tags:
        - medias
      summary: Create a new media
      description: Adds a new media
      requestBody:
        description: The body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Medias"
      responses:
        "201":
          description: The ID of the newly created media
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/GenericServerError"
  /medias/{mediaId}:
    get:
      tags:
        - medias
      summary: get media by Id
      description: ""
      operationId: getSingleMedia
      parameters:
        - name: mediaId
          in: path
          description: single media by Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Medias"
    put:
      tags:
        - medias
      description: Update an existing Media
      summary: Update
      parameters:
        - in: path
          name: mediaId
          required: true
          schema:
            type: string
          description: The ID of the Media to update
      requestBody:
        description: Fields to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Medias"
      responses:
        "200":
          description: A list of media
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Medias"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GenericServerError"
    delete:
      tags:
        - medias
      summary: Delete
      description: Delete a specific Media by ID
      parameters:
        - in: path
          name: mediaId
          required: true
          schema:
            type: string
          description: The ID of the Media to delete
      responses:
        "204":
          description: Empty Response
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GenericServerError"
  /medias/{mediaId}/poster:
    post:
      tags:
        - medias
      summary: uploads an image
      description: ""
      operationId: uploadPoster
      parameters:
        - name: mediaId
          in: path
          description: ID of media to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Medias"
  /medias/{mediaId}/pdf:
    get:
      tags:
        - medias
      summary: get media pdf
      description: ""
      operationId: getSingleMediaPdf
      parameters:
        - name: mediaId
          in: path
          description: single media poster by Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Medias"
components:
  responses:
    NotFound:
      description: The specific resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: Some problems with your request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Bearer token missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    GenericServerError:
      description: A problem on the server occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Medias:
      type: object
      properties:
        mediaId:
          type: string
        Title:
          type: string
        Poster:
          type: string
        Type:
          type: string

    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
